package main

/*
	Author : {{.Author}}
	Date   : {{.Date}}
*/

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/rs/cors"

	config "{{.Module}}/internal/config"
	//"{{.Module}}/internal/controller"
)

//Service object that contains the Port and Router of the application
type Service struct {
	Port   string
	Router *mux.Router
}

/*
   Running the service in port {{.Port}} (getting the value from ./assets/config/production.json )

       Endpoints:
		GET:

		POST:

*/
func (s Service) run() {

	configData, err := config.GetAppConfig("./assets/config/config.yaml")
	if err != nil {
		panic(fmt.Errorf("creating_config %w", err))

	}
	s.Port = configData.Server.Port

	/*
	exampleController, err := controller.NewExampleController()
	if err != nil {
		panic(fmt.Errorf("creating_example_controller %w", err))
	}
	s.Router.HandleFunc("/api/example/{country}", exampleController.Middleware).Methods("GET")
	*/

	c := cors.New(cors.Options{
		AllowedOrigins: []string{"http://localhost:8080"},
		AllowedMethods: []string{"GET", "POST", "OPTIONS"},
		AllowedHeaders: []string{"Content-Type", "Origin", "Accept", "*", "Authorization"},
	})


	handler := c.Handler(s.Router)

	fmt.Println("server running at port " + s.Port)
	err = http.ListenAndServe(s.Port, handler)
	if err != nil {
		panic(fmt.Errorf("listener_and_serve %w", err))
	}
}

func main() {
	service := Service{Router: mux.NewRouter().StrictSlash(true)}
	service.run()
}